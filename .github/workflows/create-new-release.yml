name: Create new release
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Major, minor, patch?'
        default: 'patch'
        required: true
        type: string
jobs:
  lint_test_build:
    name: Lint, test and build
    runs-on: ubuntu-latest
    steps:
      - run: echo "Lint, test and build"

  calculate_next_version:
    name: Calculate next version
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.bump_version.outputs.NEXT_VERSION }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get latest tag
      run: | 
        LATEST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    - name: Remove v prefix
      run: |    
        LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/v//')
        echo "LATEST_VERSION=$LATEST_VERSION" >>  $GITHUB_ENV

    - name: Bump version
      id: bump_version
      run: |
        MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
        MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
        PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
        if [ "${{ inputs.name }}" == "major" ]; then
          MAJOR=$((MAJOR+1))
          MINOR=0
          PATCH=0
        elif [ "${{ inputs.name }}" == "minor" ]; then 
          MINOR=$((MINOR+1))
          PATCH=0
        elif [ "${{ inputs.name }}" == "patch" ]; then
          PATCH=$((PATCH+1))
        fi
        echo "NEXT_VERSION=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
  
  update_csproj:
      name: Update .csproj
      runs-on: ubuntu-latest
      needs: [lint_test_build, calculate_next_version]
      permissions:
        contents: write
      steps:
          - name: Checkout
            uses: actions/checkout@v4
  
          - name: Update .csproj file
            id: update
            uses: vers-one/dotnet-project-version-updater@v1.7
            with:
              file: "Example.csproj"
              version: ${{ needs.calculate_next_version.outputs.next_version }}

          - run: |
              git config user.name "${{ github.actor }}"
              git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
              git add .
              git commit -m "Update project version to ${{ needs.calculate_next_version.outputs.next_version }}"
              git push

  create_tag_and_release:
      name: Create tag and release
      runs-on: ubuntu-latest
      needs: [lint_test_build, calculate_next_version, update_csproj]
      permissions:
        contents: write
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Create tag
          run: |
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
            git tag -a "v${{ needs.calculate_next_version.outputs.next_version }}" -m "Release ${{ needs.calculate_next_version.outputs.next_version }}"
            git push origin "v${{ needs.calculate_next_version.outputs.next_version }}"

        - name: Create release        
          run: gh release create "v${{ needs.calculate_next_version.outputs.next_version }}" --generate-notes
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
